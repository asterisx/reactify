{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"@emotion/core\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar FileUpload =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FileUpload, _Component);\n\n  function FileUpload() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FileUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FileUpload)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      dragOver: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", _react.default.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onDrop\", function (event) {\n      event.preventDefault();\n\n      _this.onDragLeave();\n\n      var filesAdded = event.dataTransfer ? event.dataTransfer.files : event.target.files;\n\n      if (_typeof(filesAdded) === 'object') {\n        filesAdded = Object.values(filesAdded).map(function (value) {\n          return value;\n        }).filter(function (value) {\n          return _typeof(value) === 'object';\n        });\n      }\n\n      if (_this.props.multiple === false && filesAdded.length > 1) {\n        filesAdded = [filesAdded[0]];\n      }\n\n      if (filesAdded.length > _this.props.maxFiles) {\n        _this.onError({\n          code: FileUpload.errorMeta.maxFileCountReached.code\n        });\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange({\n          files: filesAdded.slice(0, _this.props.maxFiles)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragOver\", function (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragEnter\", function () {\n      _this.setState({\n        dragOver: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragLeave\", function () {\n      _this.setState({\n        dragOver: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onError\", function (error, file) {\n      _this.props.onError({\n        error: error,\n        file: file\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mimeTypeLeft\", function (mime) {\n      return mime.split('/')[0];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mimeTypeRight\", function (mime) {\n      return mime.split('/')[1];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fileTypeAcceptable\", function (file) {\n      var allowedFileTypes = _this.props.allowedFileTypes;\n\n      if (!allowedFileTypes) {\n        return true;\n      }\n\n      var isAcceptable = allowedFileTypes.some(function (allowedfileType) {\n        if (file.type) {\n          var fileTypePartLeft = _this.mimeTypeLeft(file.type);\n\n          var fileTypePartRight = _this.mimeTypeRight(file.type);\n\n          var _allowedfileType$spli = allowedfileType.split('/'),\n              _allowedfileType$spli2 = _slicedToArray(_allowedfileType$spli, 2),\n              allowedFileTypePartLeft = _allowedfileType$spli2[0],\n              allowedFileTypePartRight = _allowedfileType$spli2[1];\n\n          if (allowedFileTypePartLeft && allowedFileTypePartRight) {\n            if (allowedFileTypePartLeft === fileTypePartLeft && (allowedFileTypePartRight === '*' || allowedFileTypePartRight === fileTypePartRight)) {\n              return true;\n            }\n          }\n        } else if (file.extension) {\n          var ext = allowedfileType.substr(1);\n          return file.extension.toLowerCase() === ext.toLowerCase();\n        }\n\n        return false;\n      });\n\n      if (!isAcceptable) {\n        _this.onError({\n          code: FileUpload.errorMeta.notAValidType.code,\n          file: file\n        });\n      }\n\n      return isAcceptable;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fileSizeAcceptable\", function (file) {\n      if (file.size > _this.props.maxFileSize) {\n        _this.onError({\n          code: FileUpload.errorMeta.sizeTooLarge.code,\n          file: file\n        });\n\n        return false;\n      }\n\n      if (file.size < _this.props.minFileSize) {\n        _this.onError({\n          code: FileUpload.errorMeta.sizeTsizeTooSmallooLarge.code,\n          file: file\n        });\n\n        return false;\n      }\n\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openFileChooser\", function () {\n      _this.inputRef.current.value = null;\n\n      _this.inputRef.current.click();\n    });\n\n    return _this;\n  }\n\n  _createClass(FileUpload, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          onChange = _this$props.onChange,\n          onError = _this$props.onError,\n          allowedFileTypes = _this$props.allowedFileTypes,\n          multiple = _this$props.multiple,\n          maxFiles = _this$props.maxFiles,\n          maxFileSize = _this$props.maxFileSize,\n          minFileSize = _this$props.minFileSize,\n          clickable = _this$props.clickable,\n          otherProps = _objectWithoutProperties(_this$props, [\"children\", \"onChange\", \"onError\", \"allowedFileTypes\", \"multiple\", \"maxFiles\", \"maxFileSize\", \"minFileSize\", \"clickable\"]);\n\n      var onDrop = this.onDrop,\n          onDragOver = this.onDragOver,\n          onDragEnter = this.onDragEnter,\n          onDragLeave = this.onDragLeave,\n          openFileChooser = this.openFileChooser,\n          inputRef = this.inputRef;\n      var dragOver = this.state.dragOver;\n      return (0, _core.jsx)(\"div\", otherProps, (0, _core.jsx)(\"input\", {\n        type: \"file\",\n        accept: this.props.allowedFileTypes ? this.props.allowedFileTypes.join() : '',\n        multiple: this.props.multiple,\n        style: {\n          display: 'none'\n        },\n        ref: inputRef,\n        onChange: onDrop\n      }), (0, _core.jsx)(\"div\", {\n        onClick: function onClick() {\n          return clickable && openFileChooser();\n        },\n        onDrop: onDrop,\n        onDragOver: onDragOver,\n        onDragEnter: onDragEnter,\n        onDragLeave: onDragLeave\n      }, typeof children === 'function' ? children({\n        dragOver: dragOver\n      }) : children));\n    }\n  }]);\n\n  return FileUpload;\n}(_react.Component);\n\n_defineProperty(FileUpload, \"propTypes\", {\n  /**\n   * Callback fired when files are dropped/changes.\n   *\n   * @param {object} obj Use something like { files } = obj to get the files\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * Callback fired when files are dropped/changes.\n   *\n   * @param {object} obj Use { code } = obj and reconcile it with\n   * FileUpload.errorMeta to check for available codes,\n   * To access file itself, Use { file } = obj\n   */\n  onError: _propTypes.default.func,\n\n  /**\n   * Maps to a input type='file' accepts attribute,\n   * but instead of a string,\n   * pass an array of string\n   */\n  allowedFileTypes: _propTypes.default.arrayOf(_propTypes.default.string),\n\n  /**\n   * If 'true' multiple files can be uploaded\n   * Default to 'false'\n   */\n  multiple: _propTypes.default.bool,\n\n  /**\n   * The upper limit to number of files than can be uploaded\n   */\n  maxFiles: _propTypes.default.number,\n\n  /**\n   * The upper limit to the size of a file\n   */\n  maxFileSize: _propTypes.default.number,\n\n  /**\n   * The lower limit to the size of a file\n   */\n  minFileSize: _propTypes.default.number,\n\n  /**\n   * If 'true' clicking the component triggers a file chooser\n   * Default to 'false'\n   */\n  clickable: _propTypes.default.bool\n});\n\n_defineProperty(FileUpload, \"defaultProps\", {\n  onChange: undefined,\n  onError: undefined,\n  allowedFileTypes: undefined,\n  multiple: true,\n  maxFiles: Infinity,\n  maxFileSize: Infinity,\n  minFileSize: 0,\n  clickable: true\n});\n\n_defineProperty(FileUpload, \"errorMeta\", {\n  notAValidType: {\n    code: 1\n  },\n  sizeTooLarge: {\n    code: 2\n  },\n  sizeTooSmall: {\n    code: 3\n  },\n  maxFileCountReached: {\n    code: 4\n  }\n});\n\nvar _default = FileUpload;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}