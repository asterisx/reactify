{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Timer = Timer;\nexports.isObject = isObject;\nexports.errorLogger = exports.isWithinWindow = exports.reconcileThemeProps = exports.mergeDeep = exports.areArraysDifferent = exports.getTimeFromMillis = exports.canUseDOM = void 0;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;\n\nfunction Timer(callback, delay) {\n  var timerId = delay;\n  var start = delay;\n  var remaining = delay;\n\n  this.clear = function () {\n    clearTimeout(timerId);\n  };\n\n  this.pause = function () {\n    clearTimeout(timerId);\n    remaining -= Date.now() - start;\n  };\n\n  this.resume = function () {\n    start = Date.now();\n    clearTimeout(timerId);\n    timerId = setTimeout(callback, remaining);\n  };\n\n  this.resume();\n}\n\nvar getTimeFromMillis = function getTimeFromMillis(millis) {\n  var delta = Math.abs(millis) / 1000;\n  var days = Math.floor(delta / 86400);\n  delta -= days * 86400;\n  var hours = Math.floor(delta / 3600) % 24;\n  delta -= hours * 3600;\n  var minutes = Math.floor(delta / 60) % 60;\n  delta -= minutes * 60;\n  var seconds = delta % 60;\n  return {\n    days: days,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds\n  };\n};\n\nexports.getTimeFromMillis = getTimeFromMillis;\n\nvar areArraysDifferent = function areArraysDifferent(items1, items2, fields) {\n  if (!Array.isArray(items1) || !Array.isArray(items2)) {\n    return false;\n  }\n\n  if (items1.length !== items2.length) {\n    return false;\n  }\n\n  return items1.every(function (item1) {\n    return items2.find(function (item2) {\n      return fields.every(function (field) {\n        return item1[field] === item2[field];\n      });\n    });\n  });\n};\n\nexports.areArraysDifferent = areArraysDifferent;\n\nfunction isObject(item) {\n  return item && _typeof(item) === 'object' && !Array.isArray(item);\n}\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n */\n\n\nvar mergeDeep = function mergeDeep(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (!sources.length) return target;\n  var source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (var key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, _defineProperty({}, key, source[key]));\n      }\n    }\n  }\n\n  return mergeDeep.apply(void 0, [target].concat(sources));\n};\n\nexports.mergeDeep = mergeDeep;\n\nvar reconcileThemeProps = function reconcileThemeProps(_ref) {\n  var props = _ref.props,\n      primary = _ref.primary,\n      secondary = _ref.secondary,\n      dark = _ref.dark,\n      light = _ref.light,\n      info = _ref.info,\n      warning = _ref.warning,\n      danger = _ref.danger,\n      success = _ref.success;\n  var themeprops = {\n    primary: false,\n    secondary: false,\n    dark: false,\n    light: false,\n    info: false,\n    warning: false,\n    danger: false,\n    success: false\n  };\n\n  if (props.secondary) {\n    themeprops.secondary = true;\n    return themeprops;\n  }\n\n  if (props.dark) {\n    themeprops.dark = true;\n    return themeprops;\n  }\n\n  if (props.light) {\n    themeprops.light = true;\n    return themeprops;\n  }\n\n  if (props.info) {\n    themeprops.info = true;\n    return themeprops;\n  }\n\n  if (props.warning) {\n    themeprops.warning = true;\n    return themeprops;\n  }\n\n  if (props.danger) {\n    themeprops.danger = true;\n    return themeprops;\n  }\n\n  if (props.success) {\n    themeprops.success = true;\n    return themeprops;\n  }\n\n  if (secondary) {\n    themeprops.secondary = true;\n    return themeprops;\n  }\n\n  if (dark) {\n    themeprops.dark = true;\n    return themeprops;\n  }\n\n  if (light) {\n    themeprops.light = true;\n    return themeprops;\n  }\n\n  if (info) {\n    themeprops.info = true;\n    return themeprops;\n  }\n\n  if (warning) {\n    themeprops.warning = true;\n    return themeprops;\n  }\n\n  if (danger) {\n    themeprops.danger = true;\n    return themeprops;\n  }\n\n  if (success) {\n    themeprops.success = true;\n    return themeprops;\n  }\n\n  if (props.primary) {\n    themeprops.primary = true;\n    return themeprops;\n  }\n\n  if (primary) {\n    themeprops.primary = true;\n    return themeprops;\n  }\n\n  return themeprops;\n};\n\nexports.reconcileThemeProps = reconcileThemeProps;\n\nvar getWindowDimensions = function getWindowDimensions() {\n  return [Math.min(window.innerWidth, document.documentElement.clientWidth), Math.min(window.innerHeight, document.documentElement.clientHeight)];\n};\n\nvar isWithinWindow = function isWithinWindow(x, y, width, height) {\n  if (x < 0 || y < 0) return false;\n\n  var _getWindowDimensions = getWindowDimensions(),\n      _getWindowDimensions2 = _slicedToArray(_getWindowDimensions, 2),\n      winWidth = _getWindowDimensions2[0],\n      winHeight = _getWindowDimensions2[1];\n\n  if (x + width > winWidth) return false;\n  if (y + height > winHeight) return false;\n  return true;\n};\n\nexports.isWithinWindow = isWithinWindow;\n\nvar errorLogger = function errorLogger(_ref2) {\n  var component = _ref2.component,\n      error = _ref2.error;\n  console.error(\"[\".concat(component, \"] \").concat(error));\n};\n\nexports.errorLogger = errorLogger;","map":null,"metadata":{},"sourceType":"script"}