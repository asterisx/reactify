{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = void 0;\n\nvar _core = require(\"@emotion/core\");\n\nvar _common = require(\"../../../../common\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  0% {\\n      transform: scale(1, 1);\\n  }\\n  25% {\\n      transform: scale(1, 1);\\n  }\\n  50% {\\n      transform: scale(1, 0.75);\\n  }\\n  75% {\\n      transform: scale(1, 1.25);\\n  }\\n  100% {\\n      transform: scale(1, 1);\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  0% {\\n    transform: scale(1, 1);\\n  }\\n  25% {\\n    transform: scale(1, 1.25);\\n  }\\n  50% {\\n    transform: scale(1, 0.75);\\n  }\\n  75% {\\n    transform: scale(1, 1);\\n  }\\n  100% {\\n    transform: scale(1, 1);\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  0% {\\n      transform: scale(1, 1);\\n  }\\n  25% {\\n      transform: scale(1, 1);\\n  }\\n  50% {\\n      transform: scale(1, 1.25);\\n  }\\n  75% {\\n      transform: scale(1, 1);\\n  }\\n  100% {\\n      transform: scale(1, 1);\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nvar spBars = (0, _core.keyframes)(_templateObject());\nvar spBarsBefore = (0, _core.keyframes)(_templateObject2());\nvar spBarsAfter = (0, _core.keyframes)(_templateObject3());\nvar commonPseudoStyle = {\n  content: '\"\"',\n  position: 'absolute',\n  width: 'inherit',\n  height: 'inherit',\n  border: 'inherit',\n  backgroundColor: 'inherit',\n  top: '-1px'\n};\nvar styles = {\n  getContainerStyle: function getContainerStyle(_ref) {\n    var primary = _ref.primary,\n        secondary = _ref.secondary,\n        dark = _ref.dark,\n        light = _ref.light,\n        info = _ref.info,\n        warning = _ref.warning,\n        danger = _ref.danger,\n        success = _ref.success,\n        theme = _ref.theme;\n    return function (_ref2) {\n      var animationDuration = _ref2.animationDuration,\n          _ref2$color = _ref2.color,\n          color = _ref2$color === void 0 ? _common.commonStyles.get.theme.color({\n        primary: primary,\n        secondary: secondary,\n        dark: dark,\n        light: light,\n        info: info,\n        warning: warning,\n        danger: danger,\n        success: success,\n        theme: theme\n      }) : _ref2$color;\n      return {\n        display: 'inline-block',\n        position: 'relative',\n        width: '.6125em',\n        height: '1.5em',\n        left: '1em',\n        border: \"1px \".concat(color, \" solid\"),\n        backgroundColor: \"\".concat(color),\n        opacity: 0.85,\n        animation: \"\".concat(spBars, \" \").concat(animationDuration, \" infinite linear\"),\n        '&:before': _objectSpread({}, commonPseudoStyle, {\n          left: '-1em',\n          animation: \"\".concat(spBarsBefore, \" \").concat(animationDuration, \" infinite linear\")\n        }),\n        '&:after': _objectSpread({}, commonPseudoStyle, {\n          right: '-1em',\n          animation: \"\".concat(spBarsAfter, \" \").concat(animationDuration, \" infinite linear\")\n        })\n      };\n    };\n  }\n};\nexports.styles = styles;","map":null,"metadata":{},"sourceType":"script"}