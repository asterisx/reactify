{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.styles = exports.BEMClassNames = void 0;\n\nvar _common = require(\"../../common\");\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar componentName = 'modal';\nvar BEMClassNames = {\n  bg: \"\".concat(_common.libraryName, \"-\").concat(componentName, \"__bg\"),\n  children: \"\".concat(_common.libraryName, \"-\").concat(componentName, \"__children\")\n};\nexports.BEMClassNames = BEMClassNames;\nvar styles = {\n  container: _objectSpread({\n    position: 'fixed',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    display: 'flex',\n    alignContent: 'center',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }, _common.commonStyles.zdIndex.z100000),\n  bg: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    right: 0,\n    left: 0,\n    opacity: 0,\n    backgroundColor: 'black'\n  },\n  child: _objectSpread({\n    position: 'relative',\n    display: 'inline-block',\n    overflow: 'auto',\n    opacity: 0\n  }, _common.commonStyles.zdIndex.z100001),\n  sizes: {\n    small: {\n      width: '30em'\n    },\n    medium: {\n      width: '50em'\n    },\n    large: {\n      width: '70em'\n    }\n  },\n  getSize: function getSize(_ref) {\n    var small = _ref.small,\n        medium = _ref.medium,\n        large = _ref.large,\n        _ref$defaultSize = _ref.defaultSize,\n        defaultSize = _ref$defaultSize === void 0 ? 'medium' : _ref$defaultSize;\n    var sizeObject = {\n      small: small,\n      medium: medium,\n      large: large\n    };\n    delete sizeObject[defaultSize];\n    return Object.entries(sizeObject).reduce(function (sizeStyle, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          isTrue = _ref3[1];\n\n      return isTrue ? styles.sizes[key] : sizeStyle;\n    }, styles.sizes[defaultSize]);\n  }\n};\nexports.styles = styles;","map":null,"metadata":{},"sourceType":"script"}