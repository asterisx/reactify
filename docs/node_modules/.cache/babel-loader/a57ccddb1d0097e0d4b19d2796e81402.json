{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _core = require(\"@emotion/core\");\n\nvar _css2 = _interopRequireDefault(require(\"@emotion/css\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _common = require(\"../../common\");\n\nvar _styles = require(\"./styles\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar HeatMap = function HeatMap(_ref) {\n  var data = _ref.data,\n      children = _ref.children,\n      cellRender = _ref.cellRender,\n      baseColor = _ref.baseColor,\n      primary = _ref.primary,\n      secondary = _ref.secondary,\n      dark = _ref.dark,\n      light = _ref.light,\n      info = _ref.info,\n      warning = _ref.warning,\n      danger = _ref.danger,\n      success = _ref.success,\n      theme = _ref.theme,\n      disabled = _ref.disabled,\n      onCellClick = _ref.onCellClick,\n      otherProps = _objectWithoutProperties(_ref, [\"data\", \"children\", \"cellRender\", \"baseColor\", \"primary\", \"secondary\", \"dark\", \"light\", \"info\", \"warning\", \"danger\", \"success\", \"theme\", \"disabled\", \"onCellClick\"]);\n\n  var flattenedValuesArray = children ? children.reduce(function (cellValues, row) {\n    return [].concat(_toConsumableArray(_react.default.Children.map(row, function (child) {\n      return _react.default.Children.only(child);\n    })), _toConsumableArray(cellValues));\n  }, []) : data.reduce(function (acc, row) {\n    return [].concat(_toConsumableArray(row), _toConsumableArray(acc));\n  }, []);\n  /**\n   * The below two values are useful in finding the darkest shade and the lightest shade\n   */\n\n  var maxValInData = Math.max.apply(Math, _toConsumableArray(flattenedValuesArray));\n  var minValInData = Math.min.apply(Math, _toConsumableArray(flattenedValuesArray));\n  var spread = maxValInData - minValInData;\n  var backgroundifiedChildren;\n\n  if (children) {\n    backgroundifiedChildren = children.map(function (row) {\n      return _react.default.cloneElement(row, {}, _react.default.Children.map(row, function (cell) {\n        return _react.default.cloneElement(cell, {\n          style: {\n            background: \"\".concat(_styles.styles.getBackgroundColor({\n              baseColor: baseColor,\n              primary: primary,\n              secondary: secondary,\n              dark: dark,\n              light: light,\n              info: info,\n              warning: warning,\n              danger: danger,\n              success: success,\n              theme: theme,\n              opacity: (+_react.default.Children.only(cell) - minValInData) / spread\n            }))\n          }\n        });\n      }));\n    });\n    console.log(backgroundifiedChildren);\n    console.log(maxValInData, minValInData);\n  }\n  /**\n   * If children is passed, use them\n   * The component supports declaration style too.\n   * <HeatMap>\n   *    <HeatMap.Row>\n   *        <HeatMap.Cell>\n   *        .\n   *        .\n   *        .\n   *        <HeatMap.Cell>\n   *    <HeatMap.Row>\n   * <HeatMap>\n   */\n\n\n  var rows = backgroundifiedChildren || data.map(function (row, xIndex) {\n    return (0, _core.jsx)(HeatMap.Row, null, row.map(function (columnValue, yIndex) {\n      return cellRender ? cellRender({\n        baseColor: baseColor,\n        value: columnValue,\n        row: xIndex,\n        column: yIndex\n      }) : (0, _core.jsx)(HeatMap.Cell, {\n        // eslint-disable-next-line react/no-array-index-key\n        key: \"\".concat(xIndex, \" - \").concat(yIndex, \" - \").concat(columnValue),\n        onClick: function onClick() {\n          if (onCellClick) {\n            onCellClick({\n              row: xIndex,\n              column: yIndex\n            });\n          }\n        },\n        style: {\n          background: \"\".concat(_styles.styles.getBackgroundColor({\n            baseColor: baseColor,\n            primary: primary,\n            secondary: secondary,\n            dark: dark,\n            light: light,\n            info: info,\n            warning: warning,\n            danger: danger,\n            success: success,\n            theme: theme,\n            opacity: (+columnValue - minValInData) / spread\n          }))\n        },\n        disabled: disabled\n      }, columnValue);\n    }));\n  });\n  return (0, _core.jsx)(\"div\", _extends({\n    css:\n    /*#__PURE__*/\n    (0, _css2.default)([_styles.styles.container], \"label:HeatMap;\" + (process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21wb25lbnRzL2hlYXQtbWFwL2hlYXQtbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlITSIsImZpbGUiOiIuLi8uLi8uLi9saWIvY29tcG9uZW50cy9oZWF0LW1hcC9oZWF0LW1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtcbiAgdGhlbWVQcm9wVHlwZXMsXG4gIGRlZmF1bHRUaGVtZVByb3BUeXBlcyxcbn0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3QgSGVhdE1hcCA9ICh7XG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBjZWxsUmVuZGVyLFxuICBiYXNlQ29sb3IsXG4gIHByaW1hcnksXG4gIHNlY29uZGFyeSxcbiAgZGFyayxcbiAgbGlnaHQsXG4gIGluZm8sXG4gIHdhcm5pbmcsXG4gIGRhbmdlcixcbiAgc3VjY2VzcyxcbiAgdGhlbWUsXG4gIGRpc2FibGVkLFxuICBvbkNlbGxDbGljayxcbiAgLi4ub3RoZXJQcm9wc1xufSkgPT4ge1xuICBjb25zdCBmbGF0dGVuZWRWYWx1ZXNBcnJheSA9IGNoaWxkcmVuXG4gICAgPyBjaGlsZHJlbi5yZWR1Y2UoXG4gICAgICAoY2VsbFZhbHVlcywgcm93KSA9PiBbXG4gICAgICAgIC4uLlJlYWN0LkNoaWxkcmVuLm1hcChyb3csIGNoaWxkID0+IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGQpKSxcbiAgICAgICAgLi4uY2VsbFZhbHVlc10sXG4gICAgICBbXSxcbiAgICApXG4gICAgOiBkYXRhLnJlZHVjZSgoYWNjLCByb3cpID0+IFsuLi5yb3csIC4uLmFjY10sIFtdKTtcbiAgLyoqXG4gICAqIFRoZSBiZWxvdyB0d28gdmFsdWVzIGFyZSB1c2VmdWwgaW4gZmluZGluZyB0aGUgZGFya2VzdCBzaGFkZSBhbmQgdGhlIGxpZ2h0ZXN0IHNoYWRlXG4gICAqL1xuICBjb25zdCBtYXhWYWxJbkRhdGEgPSBNYXRoLm1heCguLi5mbGF0dGVuZWRWYWx1ZXNBcnJheSk7XG4gIGNvbnN0IG1pblZhbEluRGF0YSA9IE1hdGgubWluKC4uLmZsYXR0ZW5lZFZhbHVlc0FycmF5KTtcblxuICBjb25zdCBzcHJlYWQgPSBtYXhWYWxJbkRhdGEgLSBtaW5WYWxJbkRhdGE7XG5cbiAgbGV0IGJhY2tncm91bmRpZmllZENoaWxkcmVuO1xuXG4gIGlmIChjaGlsZHJlbikge1xuICAgIGJhY2tncm91bmRpZmllZENoaWxkcmVuID0gY2hpbGRyZW4ubWFwKHJvdyA9PiBSZWFjdC5jbG9uZUVsZW1lbnQoXG4gICAgICByb3csXG4gICAgICB7fSxcbiAgICAgIFJlYWN0LkNoaWxkcmVuLm1hcChyb3csXG4gICAgICAgIGNlbGwgPT4gUmVhY3QuY2xvbmVFbGVtZW50KGNlbGwsIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogYCR7c3R5bGVzLmdldEJhY2tncm91bmRDb2xvcih7XG4gICAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgICAgcHJpbWFyeSxcbiAgICAgICAgICAgICAgc2Vjb25kYXJ5LFxuICAgICAgICAgICAgICBkYXJrLFxuICAgICAgICAgICAgICBsaWdodCxcbiAgICAgICAgICAgICAgaW5mbyxcbiAgICAgICAgICAgICAgd2FybmluZyxcbiAgICAgICAgICAgICAgZGFuZ2VyLFxuICAgICAgICAgICAgICBzdWNjZXNzLFxuICAgICAgICAgICAgICB0aGVtZSxcbiAgICAgICAgICAgICAgb3BhY2l0eTogKCtSZWFjdC5DaGlsZHJlbi5vbmx5KGNlbGwpIC0gbWluVmFsSW5EYXRhKSAvIHNwcmVhZCxcbiAgICAgICAgICAgIH0pfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpLFxuICAgICkpO1xuICAgIGNvbnNvbGUubG9nKGJhY2tncm91bmRpZmllZENoaWxkcmVuKTtcbiAgICBjb25zb2xlLmxvZyhtYXhWYWxJbkRhdGEsIG1pblZhbEluRGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogSWYgY2hpbGRyZW4gaXMgcGFzc2VkLCB1c2UgdGhlbVxuICAgKiBUaGUgY29tcG9uZW50IHN1cHBvcnRzIGRlY2xhcmF0aW9uIHN0eWxlIHRvby5cbiAgICogPEhlYXRNYXA+XG4gICAqICAgIDxIZWF0TWFwLlJvdz5cbiAgICogICAgICAgIDxIZWF0TWFwLkNlbGw+XG4gICAqICAgICAgICAuXG4gICAqICAgICAgICAuXG4gICAqICAgICAgICAuXG4gICAqICAgICAgICA8SGVhdE1hcC5DZWxsPlxuICAgKiAgICA8SGVhdE1hcC5Sb3c+XG4gICAqIDxIZWF0TWFwPlxuICAgKi9cbiAgY29uc3Qgcm93cyA9IGJhY2tncm91bmRpZmllZENoaWxkcmVuIHx8IGRhdGEubWFwKChyb3csIHhJbmRleCkgPT4gKFxuICAgIDxIZWF0TWFwLlJvdz5cbiAgICAgIHtyb3cubWFwKChjb2x1bW5WYWx1ZSwgeUluZGV4KSA9PiAoXG4gICAgICAgIGNlbGxSZW5kZXIgPyBjZWxsUmVuZGVyKHtcbiAgICAgICAgICBiYXNlQ29sb3IsIHZhbHVlOiBjb2x1bW5WYWx1ZSwgcm93OiB4SW5kZXgsIGNvbHVtbjogeUluZGV4LFxuICAgICAgICB9KSA6IChcbiAgICAgICAgICA8SGVhdE1hcC5DZWxsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICBrZXk9e2Ake3hJbmRleH0gLSAke3lJbmRleH0gLSAke2NvbHVtblZhbHVlfWB9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChvbkNlbGxDbGljaykgeyBvbkNlbGxDbGljayh7IHJvdzogeEluZGV4LCBjb2x1bW46IHlJbmRleCB9KTsgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IGAke3N0eWxlcy5nZXRCYWNrZ3JvdW5kQ29sb3Ioe1xuICAgICAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgICAgICBwcmltYXJ5LFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeSxcbiAgICAgICAgICAgICAgICBkYXJrLFxuICAgICAgICAgICAgICAgIGxpZ2h0LFxuICAgICAgICAgICAgICAgIGluZm8sXG4gICAgICAgICAgICAgICAgd2FybmluZyxcbiAgICAgICAgICAgICAgICBkYW5nZXIsXG4gICAgICAgICAgICAgICAgc3VjY2VzcyxcbiAgICAgICAgICAgICAgICB0aGVtZSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAoK2NvbHVtblZhbHVlIC0gbWluVmFsSW5EYXRhKSAvIHNwcmVhZCxcbiAgICAgICAgICAgICAgfSl9YCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NvbHVtblZhbHVlfVxuICAgICAgICAgIDwvSGVhdE1hcC5DZWxsPlxuICAgICAgICApKSl9XG4gICAgPC9IZWF0TWFwLlJvdz5cbiAgKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgIF19XG4gICAgICB7Li4ub3RoZXJQcm9wc31cbiAgICA+XG4gICAgICB7cm93c31cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblxuSGVhdE1hcC5Sb3cgPSAoe1xuICBjaGlsZHJlbixcbiAgLi4ub3RoZXJQcm9wc1xufSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXtbXG4gICAgICBzdHlsZXMucm93LFxuICAgIF19XG4gICAgey4uLm90aGVyUHJvcHN9XG4gID5cbiAgICB7Y2hpbGRyZW59XG4gIDwvZGl2PlxuKTtcblxuSGVhdE1hcC5DZWxsID0gKHtcbiAgY2hpbGRyZW4sXG4gIGRpc2FibGVkLFxuICAuLi5vdGhlclByb3BzXG59KSA9PiAoXG4gIDxzcGFuXG4gICAgY3NzPXtbXG4gICAgICBzdHlsZXMuY2VsbCxcbiAgICAgIGRpc2FibGVkICYmIHN0eWxlcy5ub1BvaW50ZXJFdmVudHMsXG4gICAgXX1cbiAgICB7Li4ub3RoZXJQcm9wc31cbiAgPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9zcGFuPlxuKTtcblxuSGVhdE1hcC5DZWxsLmRpc3BsYXlOYW1lID0gJ0NlbGwnO1xuXG5IZWF0TWFwLkNlbGwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgJ3RydWUnLCBubyBwb2ludGVyIGV2ZW50c1xuICAgKiBEZWZhdWx0IGlzICdmYWxzZSdcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbkhlYXRNYXAuQ2VsbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiBmYWxzZSxcbn07XG5cbkhlYXRNYXAucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGRhdGFzZXQgaXRzZWxmLFxuICAgKiBUaGlzIGlzIGEgbXVsdGRpbWVuc2lvbmFsIGFycmF5IG9mIG51bWJlcnNcbiAgICogV2hlcmUgZWFjaCByb3cgaGFzIHNhbWUgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIElmIHlvdSBkb24ndCBkbyB0aGF0LCBwYXNzIHVuZGVmaW5lZCBmb3IgdGhvc2UgY2VsbHNcbiAgICogd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gcGFzcyBhbnkgdmFsdWVcbiAgICovXG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpKSxcbiAgLyoqXG4gICAqIFRoZSBiYXNlQ29sb3IgYWN0cyBhcyBhIGJhc2UgZm9yIGNlbGwgYmFja2dyb3VuZCBjb2xvcnMsXG4gICAqIFRoZSBtYXhpbXVtIHZhbHVlIGluIHRoZSBkYXRhIHNldCBoYXMgdGhlIGJhc2VDb2xvcixcbiAgICogVGhlIGxlYXN0IHZhbHVlIGhhcyBubyBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqIEFsbCBvdGhlciBjZWxscyBnZXQgYSByYXRpbyBvZiBgb3BhY2l0eWAgYXBwbGllZCB0byB0aGUgYmFzZUNvbG9yXG4gICAqIGRlcGVuZGluZyBvbiB0aGVpciBkYXRhc2V0IHZhbHVlXG4gICAqL1xuICBiYXNlQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBSZW5kZXIgUHJvcCBmb3IgSGVhdE1hcCBDZWxsc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZUNvbG9yIFRoZSBiYXNlQ29sb3IgaXMgcGFzc2VkIGFueSwgdGhlbWUgY29sb3JzIG90aGVyd2lzZVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGluIHRoZSBkYXRhc2V0IGZvciBjdXJyZW50IGNlbGxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdyBUaGlzIGlzIHRoZSByb3cgbnVtYmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW4gVGhpcyBpcyB0aGUgY29sdW1uIG51bWJlclxuICAgKi9cbiAgY2VsbFJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgY2VsbCBpcyBjbGlja2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgVGhpcyBpcyB0aGUgcm93IG51bWJlclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uIFRoaXMgaXMgdGhlIGNvbHVtbiBudW1iZXJcbiAgICovXG4gIG9uQ2VsbENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmICd0cnVlJywgbm8gcG9pbnRlciBldmVudHNcbiAgICogRGVmYXVsdCBpcyAnZmFsc2UnXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIGNvbGxlY3Rpb24gb2YgdmFsaWQgdGhlbWUgdHlwZXMsIGFsbCBib29sZWFuIHZhbHVlc1xuICAgKi9cbiAgLi4udGhlbWVQcm9wVHlwZXMsXG59O1xuXG5IZWF0TWFwLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGF0YTogW10sXG4gIGJhc2VDb2xvcjogdW5kZWZpbmVkLFxuICBjZWxsUmVuZGVyOiB1bmRlZmluZWQsXG4gIG9uQ2VsbENsaWNrOiB1bmRlZmluZWQsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgLi4uZGVmYXVsdFRoZW1lUHJvcFR5cGVzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhdE1hcDtcbiJdfQ== */\"))\n  }, otherProps), rows);\n};\n\nHeatMap.Row = function (_ref2) {\n  var children = _ref2.children,\n      otherProps = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  return (0, _core.jsx)(\"div\", _extends({\n    css:\n    /*#__PURE__*/\n    (0, _css2.default)([_styles.styles.row], process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21wb25lbnRzL2hlYXQtbWFwL2hlYXQtbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlJSSIsImZpbGUiOiIuLi8uLi8uLi9saWIvY29tcG9uZW50cy9oZWF0LW1hcC9oZWF0LW1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtcbiAgdGhlbWVQcm9wVHlwZXMsXG4gIGRlZmF1bHRUaGVtZVByb3BUeXBlcyxcbn0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3QgSGVhdE1hcCA9ICh7XG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBjZWxsUmVuZGVyLFxuICBiYXNlQ29sb3IsXG4gIHByaW1hcnksXG4gIHNlY29uZGFyeSxcbiAgZGFyayxcbiAgbGlnaHQsXG4gIGluZm8sXG4gIHdhcm5pbmcsXG4gIGRhbmdlcixcbiAgc3VjY2VzcyxcbiAgdGhlbWUsXG4gIGRpc2FibGVkLFxuICBvbkNlbGxDbGljayxcbiAgLi4ub3RoZXJQcm9wc1xufSkgPT4ge1xuICBjb25zdCBmbGF0dGVuZWRWYWx1ZXNBcnJheSA9IGNoaWxkcmVuXG4gICAgPyBjaGlsZHJlbi5yZWR1Y2UoXG4gICAgICAoY2VsbFZhbHVlcywgcm93KSA9PiBbXG4gICAgICAgIC4uLlJlYWN0LkNoaWxkcmVuLm1hcChyb3csIGNoaWxkID0+IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGQpKSxcbiAgICAgICAgLi4uY2VsbFZhbHVlc10sXG4gICAgICBbXSxcbiAgICApXG4gICAgOiBkYXRhLnJlZHVjZSgoYWNjLCByb3cpID0+IFsuLi5yb3csIC4uLmFjY10sIFtdKTtcbiAgLyoqXG4gICAqIFRoZSBiZWxvdyB0d28gdmFsdWVzIGFyZSB1c2VmdWwgaW4gZmluZGluZyB0aGUgZGFya2VzdCBzaGFkZSBhbmQgdGhlIGxpZ2h0ZXN0IHNoYWRlXG4gICAqL1xuICBjb25zdCBtYXhWYWxJbkRhdGEgPSBNYXRoLm1heCguLi5mbGF0dGVuZWRWYWx1ZXNBcnJheSk7XG4gIGNvbnN0IG1pblZhbEluRGF0YSA9IE1hdGgubWluKC4uLmZsYXR0ZW5lZFZhbHVlc0FycmF5KTtcblxuICBjb25zdCBzcHJlYWQgPSBtYXhWYWxJbkRhdGEgLSBtaW5WYWxJbkRhdGE7XG5cbiAgbGV0IGJhY2tncm91bmRpZmllZENoaWxkcmVuO1xuXG4gIGlmIChjaGlsZHJlbikge1xuICAgIGJhY2tncm91bmRpZmllZENoaWxkcmVuID0gY2hpbGRyZW4ubWFwKHJvdyA9PiBSZWFjdC5jbG9uZUVsZW1lbnQoXG4gICAgICByb3csXG4gICAgICB7fSxcbiAgICAgIFJlYWN0LkNoaWxkcmVuLm1hcChyb3csXG4gICAgICAgIGNlbGwgPT4gUmVhY3QuY2xvbmVFbGVtZW50KGNlbGwsIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogYCR7c3R5bGVzLmdldEJhY2tncm91bmRDb2xvcih7XG4gICAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgICAgcHJpbWFyeSxcbiAgICAgICAgICAgICAgc2Vjb25kYXJ5LFxuICAgICAgICAgICAgICBkYXJrLFxuICAgICAgICAgICAgICBsaWdodCxcbiAgICAgICAgICAgICAgaW5mbyxcbiAgICAgICAgICAgICAgd2FybmluZyxcbiAgICAgICAgICAgICAgZGFuZ2VyLFxuICAgICAgICAgICAgICBzdWNjZXNzLFxuICAgICAgICAgICAgICB0aGVtZSxcbiAgICAgICAgICAgICAgb3BhY2l0eTogKCtSZWFjdC5DaGlsZHJlbi5vbmx5KGNlbGwpIC0gbWluVmFsSW5EYXRhKSAvIHNwcmVhZCxcbiAgICAgICAgICAgIH0pfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpLFxuICAgICkpO1xuICAgIGNvbnNvbGUubG9nKGJhY2tncm91bmRpZmllZENoaWxkcmVuKTtcbiAgICBjb25zb2xlLmxvZyhtYXhWYWxJbkRhdGEsIG1pblZhbEluRGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogSWYgY2hpbGRyZW4gaXMgcGFzc2VkLCB1c2UgdGhlbVxuICAgKiBUaGUgY29tcG9uZW50IHN1cHBvcnRzIGRlY2xhcmF0aW9uIHN0eWxlIHRvby5cbiAgICogPEhlYXRNYXA+XG4gICAqICAgIDxIZWF0TWFwLlJvdz5cbiAgICogICAgICAgIDxIZWF0TWFwLkNlbGw+XG4gICAqICAgICAgICAuXG4gICAqICAgICAgICAuXG4gICAqICAgICAgICAuXG4gICAqICAgICAgICA8SGVhdE1hcC5DZWxsPlxuICAgKiAgICA8SGVhdE1hcC5Sb3c+XG4gICAqIDxIZWF0TWFwPlxuICAgKi9cbiAgY29uc3Qgcm93cyA9IGJhY2tncm91bmRpZmllZENoaWxkcmVuIHx8IGRhdGEubWFwKChyb3csIHhJbmRleCkgPT4gKFxuICAgIDxIZWF0TWFwLlJvdz5cbiAgICAgIHtyb3cubWFwKChjb2x1bW5WYWx1ZSwgeUluZGV4KSA9PiAoXG4gICAgICAgIGNlbGxSZW5kZXIgPyBjZWxsUmVuZGVyKHtcbiAgICAgICAgICBiYXNlQ29sb3IsIHZhbHVlOiBjb2x1bW5WYWx1ZSwgcm93OiB4SW5kZXgsIGNvbHVtbjogeUluZGV4LFxuICAgICAgICB9KSA6IChcbiAgICAgICAgICA8SGVhdE1hcC5DZWxsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICBrZXk9e2Ake3hJbmRleH0gLSAke3lJbmRleH0gLSAke2NvbHVtblZhbHVlfWB9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChvbkNlbGxDbGljaykgeyBvbkNlbGxDbGljayh7IHJvdzogeEluZGV4LCBjb2x1bW46IHlJbmRleCB9KTsgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IGAke3N0eWxlcy5nZXRCYWNrZ3JvdW5kQ29sb3Ioe1xuICAgICAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgICAgICBwcmltYXJ5LFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeSxcbiAgICAgICAgICAgICAgICBkYXJrLFxuICAgICAgICAgICAgICAgIGxpZ2h0LFxuICAgICAgICAgICAgICAgIGluZm8sXG4gICAgICAgICAgICAgICAgd2FybmluZyxcbiAgICAgICAgICAgICAgICBkYW5nZXIsXG4gICAgICAgICAgICAgICAgc3VjY2VzcyxcbiAgICAgICAgICAgICAgICB0aGVtZSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAoK2NvbHVtblZhbHVlIC0gbWluVmFsSW5EYXRhKSAvIHNwcmVhZCxcbiAgICAgICAgICAgICAgfSl9YCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NvbHVtblZhbHVlfVxuICAgICAgICAgIDwvSGVhdE1hcC5DZWxsPlxuICAgICAgICApKSl9XG4gICAgPC9IZWF0TWFwLlJvdz5cbiAgKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgIF19XG4gICAgICB7Li4ub3RoZXJQcm9wc31cbiAgICA+XG4gICAgICB7cm93c31cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblxuSGVhdE1hcC5Sb3cgPSAoe1xuICBjaGlsZHJlbixcbiAgLi4ub3RoZXJQcm9wc1xufSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXtbXG4gICAgICBzdHlsZXMucm93LFxuICAgIF19XG4gICAgey4uLm90aGVyUHJvcHN9XG4gID5cbiAgICB7Y2hpbGRyZW59XG4gIDwvZGl2PlxuKTtcblxuSGVhdE1hcC5DZWxsID0gKHtcbiAgY2hpbGRyZW4sXG4gIGRpc2FibGVkLFxuICAuLi5vdGhlclByb3BzXG59KSA9PiAoXG4gIDxzcGFuXG4gICAgY3NzPXtbXG4gICAgICBzdHlsZXMuY2VsbCxcbiAgICAgIGRpc2FibGVkICYmIHN0eWxlcy5ub1BvaW50ZXJFdmVudHMsXG4gICAgXX1cbiAgICB7Li4ub3RoZXJQcm9wc31cbiAgPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9zcGFuPlxuKTtcblxuSGVhdE1hcC5DZWxsLmRpc3BsYXlOYW1lID0gJ0NlbGwnO1xuXG5IZWF0TWFwLkNlbGwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgJ3RydWUnLCBubyBwb2ludGVyIGV2ZW50c1xuICAgKiBEZWZhdWx0IGlzICdmYWxzZSdcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbkhlYXRNYXAuQ2VsbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiBmYWxzZSxcbn07XG5cbkhlYXRNYXAucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGRhdGFzZXQgaXRzZWxmLFxuICAgKiBUaGlzIGlzIGEgbXVsdGRpbWVuc2lvbmFsIGFycmF5IG9mIG51bWJlcnNcbiAgICogV2hlcmUgZWFjaCByb3cgaGFzIHNhbWUgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIElmIHlvdSBkb24ndCBkbyB0aGF0LCBwYXNzIHVuZGVmaW5lZCBmb3IgdGhvc2UgY2VsbHNcbiAgICogd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gcGFzcyBhbnkgdmFsdWVcbiAgICovXG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpKSxcbiAgLyoqXG4gICAqIFRoZSBiYXNlQ29sb3IgYWN0cyBhcyBhIGJhc2UgZm9yIGNlbGwgYmFja2dyb3VuZCBjb2xvcnMsXG4gICAqIFRoZSBtYXhpbXVtIHZhbHVlIGluIHRoZSBkYXRhIHNldCBoYXMgdGhlIGJhc2VDb2xvcixcbiAgICogVGhlIGxlYXN0IHZhbHVlIGhhcyBubyBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqIEFsbCBvdGhlciBjZWxscyBnZXQgYSByYXRpbyBvZiBgb3BhY2l0eWAgYXBwbGllZCB0byB0aGUgYmFzZUNvbG9yXG4gICAqIGRlcGVuZGluZyBvbiB0aGVpciBkYXRhc2V0IHZhbHVlXG4gICAqL1xuICBiYXNlQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBSZW5kZXIgUHJvcCBmb3IgSGVhdE1hcCBDZWxsc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZUNvbG9yIFRoZSBiYXNlQ29sb3IgaXMgcGFzc2VkIGFueSwgdGhlbWUgY29sb3JzIG90aGVyd2lzZVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGluIHRoZSBkYXRhc2V0IGZvciBjdXJyZW50IGNlbGxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdyBUaGlzIGlzIHRoZSByb3cgbnVtYmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW4gVGhpcyBpcyB0aGUgY29sdW1uIG51bWJlclxuICAgKi9cbiAgY2VsbFJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgY2VsbCBpcyBjbGlja2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgVGhpcyBpcyB0aGUgcm93IG51bWJlclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uIFRoaXMgaXMgdGhlIGNvbHVtbiBudW1iZXJcbiAgICovXG4gIG9uQ2VsbENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmICd0cnVlJywgbm8gcG9pbnRlciBldmVudHNcbiAgICogRGVmYXVsdCBpcyAnZmFsc2UnXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIGNvbGxlY3Rpb24gb2YgdmFsaWQgdGhlbWUgdHlwZXMsIGFsbCBib29sZWFuIHZhbHVlc1xuICAgKi9cbiAgLi4udGhlbWVQcm9wVHlwZXMsXG59O1xuXG5IZWF0TWFwLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGF0YTogW10sXG4gIGJhc2VDb2xvcjogdW5kZWZpbmVkLFxuICBjZWxsUmVuZGVyOiB1bmRlZmluZWQsXG4gIG9uQ2VsbENsaWNrOiB1bmRlZmluZWQsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgLi4uZGVmYXVsdFRoZW1lUHJvcFR5cGVzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhdE1hcDtcbiJdfQ== */\")\n  }, otherProps), children);\n};\n\nHeatMap.Cell = function (_ref3) {\n  var children = _ref3.children,\n      disabled = _ref3.disabled,\n      otherProps = _objectWithoutProperties(_ref3, [\"children\", \"disabled\"]);\n\n  return (0, _core.jsx)(\"span\", _extends({\n    css:\n    /*#__PURE__*/\n    (0, _css2.default)([_styles.styles.cell, disabled && _styles.styles.noPointerEvents], process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21wb25lbnRzL2hlYXQtbWFwL2hlYXQtbWFwLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdKSSIsImZpbGUiOiIuLi8uLi8uLi9saWIvY29tcG9uZW50cy9oZWF0LW1hcC9oZWF0LW1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHtcbiAgdGhlbWVQcm9wVHlwZXMsXG4gIGRlZmF1bHRUaGVtZVByb3BUeXBlcyxcbn0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IHN0eWxlcyB9IGZyb20gJy4vc3R5bGVzJztcblxuY29uc3QgSGVhdE1hcCA9ICh7XG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBjZWxsUmVuZGVyLFxuICBiYXNlQ29sb3IsXG4gIHByaW1hcnksXG4gIHNlY29uZGFyeSxcbiAgZGFyayxcbiAgbGlnaHQsXG4gIGluZm8sXG4gIHdhcm5pbmcsXG4gIGRhbmdlcixcbiAgc3VjY2VzcyxcbiAgdGhlbWUsXG4gIGRpc2FibGVkLFxuICBvbkNlbGxDbGljayxcbiAgLi4ub3RoZXJQcm9wc1xufSkgPT4ge1xuICBjb25zdCBmbGF0dGVuZWRWYWx1ZXNBcnJheSA9IGNoaWxkcmVuXG4gICAgPyBjaGlsZHJlbi5yZWR1Y2UoXG4gICAgICAoY2VsbFZhbHVlcywgcm93KSA9PiBbXG4gICAgICAgIC4uLlJlYWN0LkNoaWxkcmVuLm1hcChyb3csIGNoaWxkID0+IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGQpKSxcbiAgICAgICAgLi4uY2VsbFZhbHVlc10sXG4gICAgICBbXSxcbiAgICApXG4gICAgOiBkYXRhLnJlZHVjZSgoYWNjLCByb3cpID0+IFsuLi5yb3csIC4uLmFjY10sIFtdKTtcbiAgLyoqXG4gICAqIFRoZSBiZWxvdyB0d28gdmFsdWVzIGFyZSB1c2VmdWwgaW4gZmluZGluZyB0aGUgZGFya2VzdCBzaGFkZSBhbmQgdGhlIGxpZ2h0ZXN0IHNoYWRlXG4gICAqL1xuICBjb25zdCBtYXhWYWxJbkRhdGEgPSBNYXRoLm1heCguLi5mbGF0dGVuZWRWYWx1ZXNBcnJheSk7XG4gIGNvbnN0IG1pblZhbEluRGF0YSA9IE1hdGgubWluKC4uLmZsYXR0ZW5lZFZhbHVlc0FycmF5KTtcblxuICBjb25zdCBzcHJlYWQgPSBtYXhWYWxJbkRhdGEgLSBtaW5WYWxJbkRhdGE7XG5cbiAgbGV0IGJhY2tncm91bmRpZmllZENoaWxkcmVuO1xuXG4gIGlmIChjaGlsZHJlbikge1xuICAgIGJhY2tncm91bmRpZmllZENoaWxkcmVuID0gY2hpbGRyZW4ubWFwKHJvdyA9PiBSZWFjdC5jbG9uZUVsZW1lbnQoXG4gICAgICByb3csXG4gICAgICB7fSxcbiAgICAgIFJlYWN0LkNoaWxkcmVuLm1hcChyb3csXG4gICAgICAgIGNlbGwgPT4gUmVhY3QuY2xvbmVFbGVtZW50KGNlbGwsIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgYmFja2dyb3VuZDogYCR7c3R5bGVzLmdldEJhY2tncm91bmRDb2xvcih7XG4gICAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgICAgcHJpbWFyeSxcbiAgICAgICAgICAgICAgc2Vjb25kYXJ5LFxuICAgICAgICAgICAgICBkYXJrLFxuICAgICAgICAgICAgICBsaWdodCxcbiAgICAgICAgICAgICAgaW5mbyxcbiAgICAgICAgICAgICAgd2FybmluZyxcbiAgICAgICAgICAgICAgZGFuZ2VyLFxuICAgICAgICAgICAgICBzdWNjZXNzLFxuICAgICAgICAgICAgICB0aGVtZSxcbiAgICAgICAgICAgICAgb3BhY2l0eTogKCtSZWFjdC5DaGlsZHJlbi5vbmx5KGNlbGwpIC0gbWluVmFsSW5EYXRhKSAvIHNwcmVhZCxcbiAgICAgICAgICAgIH0pfWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSkpLFxuICAgICkpO1xuICAgIGNvbnNvbGUubG9nKGJhY2tncm91bmRpZmllZENoaWxkcmVuKTtcbiAgICBjb25zb2xlLmxvZyhtYXhWYWxJbkRhdGEsIG1pblZhbEluRGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogSWYgY2hpbGRyZW4gaXMgcGFzc2VkLCB1c2UgdGhlbVxuICAgKiBUaGUgY29tcG9uZW50IHN1cHBvcnRzIGRlY2xhcmF0aW9uIHN0eWxlIHRvby5cbiAgICogPEhlYXRNYXA+XG4gICAqICAgIDxIZWF0TWFwLlJvdz5cbiAgICogICAgICAgIDxIZWF0TWFwLkNlbGw+XG4gICAqICAgICAgICAuXG4gICAqICAgICAgICAuXG4gICAqICAgICAgICAuXG4gICAqICAgICAgICA8SGVhdE1hcC5DZWxsPlxuICAgKiAgICA8SGVhdE1hcC5Sb3c+XG4gICAqIDxIZWF0TWFwPlxuICAgKi9cbiAgY29uc3Qgcm93cyA9IGJhY2tncm91bmRpZmllZENoaWxkcmVuIHx8IGRhdGEubWFwKChyb3csIHhJbmRleCkgPT4gKFxuICAgIDxIZWF0TWFwLlJvdz5cbiAgICAgIHtyb3cubWFwKChjb2x1bW5WYWx1ZSwgeUluZGV4KSA9PiAoXG4gICAgICAgIGNlbGxSZW5kZXIgPyBjZWxsUmVuZGVyKHtcbiAgICAgICAgICBiYXNlQ29sb3IsIHZhbHVlOiBjb2x1bW5WYWx1ZSwgcm93OiB4SW5kZXgsIGNvbHVtbjogeUluZGV4LFxuICAgICAgICB9KSA6IChcbiAgICAgICAgICA8SGVhdE1hcC5DZWxsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tYXJyYXktaW5kZXgta2V5XG4gICAgICAgICAgICBrZXk9e2Ake3hJbmRleH0gLSAke3lJbmRleH0gLSAke2NvbHVtblZhbHVlfWB9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChvbkNlbGxDbGljaykgeyBvbkNlbGxDbGljayh7IHJvdzogeEluZGV4LCBjb2x1bW46IHlJbmRleCB9KTsgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IGAke3N0eWxlcy5nZXRCYWNrZ3JvdW5kQ29sb3Ioe1xuICAgICAgICAgICAgICAgIGJhc2VDb2xvcixcbiAgICAgICAgICAgICAgICBwcmltYXJ5LFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeSxcbiAgICAgICAgICAgICAgICBkYXJrLFxuICAgICAgICAgICAgICAgIGxpZ2h0LFxuICAgICAgICAgICAgICAgIGluZm8sXG4gICAgICAgICAgICAgICAgd2FybmluZyxcbiAgICAgICAgICAgICAgICBkYW5nZXIsXG4gICAgICAgICAgICAgICAgc3VjY2VzcyxcbiAgICAgICAgICAgICAgICB0aGVtZSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAoK2NvbHVtblZhbHVlIC0gbWluVmFsSW5EYXRhKSAvIHNwcmVhZCxcbiAgICAgICAgICAgICAgfSl9YCxcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NvbHVtblZhbHVlfVxuICAgICAgICAgIDwvSGVhdE1hcC5DZWxsPlxuICAgICAgICApKSl9XG4gICAgPC9IZWF0TWFwLlJvdz5cbiAgKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e1tcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgIF19XG4gICAgICB7Li4ub3RoZXJQcm9wc31cbiAgICA+XG4gICAgICB7cm93c31cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cblxuSGVhdE1hcC5Sb3cgPSAoe1xuICBjaGlsZHJlbixcbiAgLi4ub3RoZXJQcm9wc1xufSkgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXtbXG4gICAgICBzdHlsZXMucm93LFxuICAgIF19XG4gICAgey4uLm90aGVyUHJvcHN9XG4gID5cbiAgICB7Y2hpbGRyZW59XG4gIDwvZGl2PlxuKTtcblxuSGVhdE1hcC5DZWxsID0gKHtcbiAgY2hpbGRyZW4sXG4gIGRpc2FibGVkLFxuICAuLi5vdGhlclByb3BzXG59KSA9PiAoXG4gIDxzcGFuXG4gICAgY3NzPXtbXG4gICAgICBzdHlsZXMuY2VsbCxcbiAgICAgIGRpc2FibGVkICYmIHN0eWxlcy5ub1BvaW50ZXJFdmVudHMsXG4gICAgXX1cbiAgICB7Li4ub3RoZXJQcm9wc31cbiAgPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9zcGFuPlxuKTtcblxuSGVhdE1hcC5DZWxsLmRpc3BsYXlOYW1lID0gJ0NlbGwnO1xuXG5IZWF0TWFwLkNlbGwucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogSWYgJ3RydWUnLCBubyBwb2ludGVyIGV2ZW50c1xuICAgKiBEZWZhdWx0IGlzICdmYWxzZSdcbiAgICovXG4gIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbkhlYXRNYXAuQ2VsbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiBmYWxzZSxcbn07XG5cbkhlYXRNYXAucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIGRhdGFzZXQgaXRzZWxmLFxuICAgKiBUaGlzIGlzIGEgbXVsdGRpbWVuc2lvbmFsIGFycmF5IG9mIG51bWJlcnNcbiAgICogV2hlcmUgZWFjaCByb3cgaGFzIHNhbWUgbnVtYmVyIG9mIGNvbHVtbnMuXG4gICAqIElmIHlvdSBkb24ndCBkbyB0aGF0LCBwYXNzIHVuZGVmaW5lZCBmb3IgdGhvc2UgY2VsbHNcbiAgICogd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gcGFzcyBhbnkgdmFsdWVcbiAgICovXG4gIGRhdGE6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5udW1iZXIpKSxcbiAgLyoqXG4gICAqIFRoZSBiYXNlQ29sb3IgYWN0cyBhcyBhIGJhc2UgZm9yIGNlbGwgYmFja2dyb3VuZCBjb2xvcnMsXG4gICAqIFRoZSBtYXhpbXVtIHZhbHVlIGluIHRoZSBkYXRhIHNldCBoYXMgdGhlIGJhc2VDb2xvcixcbiAgICogVGhlIGxlYXN0IHZhbHVlIGhhcyBubyBiYWNrZ3JvdW5kIGNvbG9yXG4gICAqIEFsbCBvdGhlciBjZWxscyBnZXQgYSByYXRpbyBvZiBgb3BhY2l0eWAgYXBwbGllZCB0byB0aGUgYmFzZUNvbG9yXG4gICAqIGRlcGVuZGluZyBvbiB0aGVpciBkYXRhc2V0IHZhbHVlXG4gICAqL1xuICBiYXNlQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG4gIC8qKlxuICAgKiBSZW5kZXIgUHJvcCBmb3IgSGVhdE1hcCBDZWxsc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZUNvbG9yIFRoZSBiYXNlQ29sb3IgaXMgcGFzc2VkIGFueSwgdGhlbWUgY29sb3JzIG90aGVyd2lzZVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGluIHRoZSBkYXRhc2V0IGZvciBjdXJyZW50IGNlbGxcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJvdyBUaGlzIGlzIHRoZSByb3cgbnVtYmVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW4gVGhpcyBpcyB0aGUgY29sdW1uIG51bWJlclxuICAgKi9cbiAgY2VsbFJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIGEgY2VsbCBpcyBjbGlja2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb3cgVGhpcyBpcyB0aGUgcm93IG51bWJlclxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uIFRoaXMgaXMgdGhlIGNvbHVtbiBudW1iZXJcbiAgICovXG4gIG9uQ2VsbENsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgLyoqXG4gICAqIElmICd0cnVlJywgbm8gcG9pbnRlciBldmVudHNcbiAgICogRGVmYXVsdCBpcyAnZmFsc2UnXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBBIGNvbGxlY3Rpb24gb2YgdmFsaWQgdGhlbWUgdHlwZXMsIGFsbCBib29sZWFuIHZhbHVlc1xuICAgKi9cbiAgLi4udGhlbWVQcm9wVHlwZXMsXG59O1xuXG5IZWF0TWFwLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGF0YTogW10sXG4gIGJhc2VDb2xvcjogdW5kZWZpbmVkLFxuICBjZWxsUmVuZGVyOiB1bmRlZmluZWQsXG4gIG9uQ2VsbENsaWNrOiB1bmRlZmluZWQsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgLi4uZGVmYXVsdFRoZW1lUHJvcFR5cGVzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhdE1hcDtcbiJdfQ== */\")\n  }, otherProps), children);\n};\n\nHeatMap.Cell.displayName = 'Cell';\nHeatMap.Cell.propTypes = {\n  /**\n   * If 'true', no pointer events\n   * Default is 'false'\n   */\n  disabled: _propTypes.default.bool\n};\nHeatMap.Cell.defaultProps = {\n  disabled: false\n};\nHeatMap.propTypes = _objectSpread({\n  /**\n   * The dataset itself,\n   * This is a multdimensional array of numbers\n   * Where each row has same number of columns.\n   * If you don't do that, pass undefined for those cells\n   * where you don't want to pass any value\n   */\n  data: _propTypes.default.arrayOf(_propTypes.default.arrayOf(_propTypes.default.number)),\n\n  /**\n   * The baseColor acts as a base for cell background colors,\n   * The maximum value in the data set has the baseColor,\n   * The least value has no background color\n   * All other cells get a ratio of `opacity` applied to the baseColor\n   * depending on their dataset value\n   */\n  baseColor: _propTypes.default.string,\n\n  /**\n   * Render Prop for HeatMap Cells\n   * @param {string} baseColor The baseColor is passed any, theme colors otherwise\n   * @param {number} value The value in the dataset for current cell\n   * @param {number} row This is the row number\n   * @param {number} column This is the column number\n   */\n  cellRender: _propTypes.default.func,\n\n  /**\n   * Callback fired when a cell is clicked\n   * @param {number} row This is the row number\n   * @param {number} column This is the column number\n   */\n  onCellClick: _propTypes.default.func,\n\n  /**\n   * If 'true', no pointer events\n   * Default is 'false'\n   */\n  disabled: _propTypes.default.bool\n}, _common.themePropTypes);\nHeatMap.defaultProps = _objectSpread({\n  data: [],\n  baseColor: undefined,\n  cellRender: undefined,\n  onCellClick: undefined,\n  disabled: false\n}, _common.defaultThemePropTypes);\nvar _default = HeatMap;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}