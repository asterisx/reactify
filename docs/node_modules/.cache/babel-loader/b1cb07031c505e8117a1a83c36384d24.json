{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Timer = Timer;\nexports.isObject = isObject;\nexports.mergeDeep = exports.areArraysDifferent = exports.getTimeFromMillis = exports.canUseDOM = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nexports.canUseDOM = canUseDOM;\n\nfunction Timer(callback, delay) {\n  var timerId = delay;\n  var start = delay;\n  var remaining = delay;\n\n  this.clear = function () {\n    clearTimeout(timerId);\n  };\n\n  this.pause = function () {\n    clearTimeout(timerId);\n    remaining -= Date.now() - start;\n  };\n\n  this.resume = function () {\n    start = Date.now();\n    clearTimeout(timerId);\n    timerId = setTimeout(callback, remaining);\n  };\n\n  this.resume();\n}\n\nvar getTimeFromMillis = function getTimeFromMillis(millis) {\n  var delta = Math.abs(millis) / 1000;\n  var days = Math.floor(delta / 86400);\n  delta -= days * 86400;\n  var hours = Math.floor(delta / 3600) % 24;\n  delta -= hours * 3600;\n  var minutes = Math.floor(delta / 60) % 60;\n  delta -= minutes * 60;\n  var seconds = delta % 60;\n  return {\n    days: days,\n    hours: hours,\n    minutes: minutes,\n    seconds: seconds\n  };\n};\n\nexports.getTimeFromMillis = getTimeFromMillis;\n\nvar areArraysDifferent = function areArraysDifferent(items1, items2, fields) {\n  if (!Array.isArray(items1) || !Array.isArray(items2)) {\n    return false;\n  }\n\n  if (items1.length !== items2.length) {\n    return false;\n  }\n\n  return items1.every(function (item1) {\n    return items2.find(function (item2) {\n      return fields.every(function (field) {\n        return item1[field] === item2[field];\n      });\n    });\n  });\n};\n\nexports.areArraysDifferent = areArraysDifferent;\n\nfunction isObject(item) {\n  return item && _typeof(item) === 'object' && !Array.isArray(item);\n}\n/**\n * Deep merge two objects.\n * @param target\n * @param ...sources\n*/\n\n\nvar mergeDeep = function mergeDeep(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (!sources.length) return target;\n  var source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (var key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) Object.assign(target, _defineProperty({}, key, {}));\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, _defineProperty({}, key, source[key]));\n      }\n    }\n  }\n\n  return mergeDeep.apply(void 0, [target].concat(sources));\n};\n\nexports.mergeDeep = mergeDeep;","map":null,"metadata":{},"sourceType":"script"}